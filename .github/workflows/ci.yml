name: CI

on:
  push:
    paths:
      - 'garminworkouts/**'
      - 'tests/**'
      - 'requirements.txt'
  pull_request_target:
    paths:
      - 'garminworkouts/**'
      - 'tests/**'
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.set-python-version.outputs.python-version }}
    steps:
      - uses: actions/checkout@v4
      - id: set-python-version
        uses: ./.github/actions/setup

  lint:
    runs-on: ubuntu-latest
    needs: [setup]

    steps:
      - uses: actions/checkout@v4
      - run: flake8 garminworkouts tests

  build:
    runs-on: ubuntu-latest
    needs: [lint, setup]

    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    env:
      PYTHON_VERSION: ${{ matrix.python-version }}
      GARMIN_USERNAME: ${{ secrets.GARMIN_USERNAME }}
      GARMIN_PASSWORD: ${{ secrets.GARMIN_PASSWORD }}
      vV02: ${{ secrets.vV02 }}
      fmin: ${{ secrets.fmin }}
      fmax: ${{ secrets.fmax }}
      flt: ${{ secrets.flt }}
      rFTP: ${{ secrets.rFTP }}
      cFTP: ${{ secrets.cFTP }}
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}

    permissions:
      actions: read
      contents: read
      
    steps:
      - uses: actions/checkout@v4
      - run: pytest --cov --junitxml=junit.xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.0.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: PYTHON_VERSION
          flags: unittests
          verbose: true
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: PYTHON_VERSION
          flags: unittests
          verbose: true

  result:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - run: |
          result="${{ needs.build.result }}"
          if [[ $result == "success" || $result == "skipped" ]]; then
            exit 0
          else
            exit 1
          fi

  tag:
    runs-on: ubuntu-latest
    needs: [result]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Increment tag
        id: increment_tag
        run: |
          latest_tag=${{ env.latest_tag }}
          if [ -z "$latest_tag" ]; then
            new_tag="v1.0.0"
          else
            IFS='.' read -r -a parts <<< "${latest_tag#v}"
            major=${parts[0]}
            minor=${parts[1]}
            patch=${parts[2]}
            new_tag=$(printf "v%s.%s.%d" "$major" "$minor" "$((patch + 1))")
          fi
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      - name: Push new tag
        if: ${{ needs.build.result == 'success' }}
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git tag ${{ env.new_tag }}
          git push origin ${{ env.new_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}